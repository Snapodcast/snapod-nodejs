datasource db {
  provider = "mysql"
  url      = env("SERVICE_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Podcast {
  id          BigInt          @id @default(autoincrement())
  cuid        String          @unique @default(cuid())
  createdAt   DateTime        @default(now())
  name        String          @db.VarChar(255)
  description String          @db.Text
  type        String          @db.VarChar(8)
  profile     PodcastProfile?
  episodes    Episode[]
  author      User            @relation(fields: [authorCuid], references: [cuid])
  authorCuid  String
}

model PodcastProfile {
  id                  BigInt   @id @default(autoincrement())
  cover_art_image_url String
  category_name       String
  language            String   @db.VarChar(5)
  clean_content       Boolean
  apple_podcasts_code String?
  apple_podcasts_url  String?  @unique
  google_podcasts_url String?  @unique
  breaker_url         String?  @unique
  castbox_url         String?  @unique
  overcast_url        String?  @unique
  pocketcast_url      String?  @unique
  radiopublic_url     String?  @unique
  spotify             String?  @unique
  netease_url         String?  @unique
  qqmusic_url         String?  @unique
  ximalaya_url        String?  @unique
  xiaoyuzhou_url      String?  @unique
  website_url         String?
  copyright           String?
  ownerName           String?
  ownerEmail          String?
  block               Boolean?
  complete            Boolean?
  new_feed_url        String?
  podcast             Podcast? @relation(fields: [podcastCuid], references: [cuid])
  podcastCuid         String?  @unique
}

model EpisodeProfile {
  id                  BigInt   @id @default(autoincrement())
  audio_url           String
  audio_length        Int
  audio_size          Int
  cover_art_image_url String?
  episode_type        String   @db.VarChar(7)
  clean_content       Boolean
  season_number       Int?
  episode_number      Int?
  episode             Episode? @relation(fields: [episodeCuid], references: [cuid])
  episodeCuid         String?  @unique
}

model Episode {
  id          BigInt          @id @default(autoincrement())
  cuid        String          @unique @default(cuid())
  createdAt   DateTime        @default(now())
  title       String          @db.VarChar(255)
  content     String?         @db.LongText
  published   Boolean         @default(false)
  profile     EpisodeProfile?
  podcast     Podcast         @relation(fields: [podcastCuid], references: [cuid])
  podcastCuid String
}

model User {
  id       BigInt    @id @default(autoincrement())
  cuid     String    @unique @default(cuid())
  email    String    @unique
  password String    @db.Char(44)
  salt     String    @db.Char(12)
  type     String    @default("User") @db.VarChar(5)
  name     String    @db.VarChar(30)
  podcasts Podcast[]
}

model Recovery {
  id    BigInt @id @default(autoincrement())
  email String
  code  String @unique @db.Char(44)
}
